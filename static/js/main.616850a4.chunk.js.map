{"version":3,"sources":["serviceWorker.ts","features/RecipeSearch/recipeSearchSlice.ts","features/RecipeSearch/SearchBox.tsx","features/RecipeSearch/RecipeListitem.tsx","features/RecipeSearch/RecipeList.tsx","app/App.tsx","app/rootReducer.ts","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","recipesSlice","createSlice","name","initialState","keyword","recipes","reducers","search","state","action","payload","recipeFilter","recipeFilterFactory","json","filter","map","item","actions","recipe","title","commands","some","includes","dispatch","useDispatch","React","useState","setKeyword","useEffect","className","id","type","placeholder","value","onChange","e","currentTarget","props","index","key","items","useSelector","recipeSearch","RecipeListitem","App","SearchBox","rootReducer","combineReducers","recipeSearchSlice","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"m4TAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wDCAAC,EAAeC,YAAY,CAC/BC,KAAM,UACNC,aAPgC,CAChCC,QAAS,GACTC,QAAS,IAMTC,SAAU,CACRC,OADQ,SACDC,EAAOC,GACZD,EAAMJ,QAAUK,EAAOC,QACvB,IAAMC,EAAeC,EAAoBJ,EAAMJ,SACzCC,EAAoBQ,EAAKR,QAC5BS,OAAOH,GACPI,KAAI,SAAAC,GAAI,OAAIA,KACfR,EAAMH,QAAUA,MAMpBE,EACEP,EAAaiB,QADfV,OAGaP,IAAf,QAEMY,EAAsB,SAACR,GAAD,OAAqB,SAACc,GAEhD,MADU,CAAIA,EAAOC,OAAX,mBAAqBD,EAAOE,WAC1BC,MAAK,SAAAL,GAAI,OAAIA,EAAKM,SAASlB,QCrC1B,aACb,IAAMmB,EAAWC,cADE,EAEWC,IAAMC,SAAS,IAF1B,mBAEZtB,EAFY,KAEHuB,EAFG,KAGnBF,IAAMG,WAAU,WACdL,EAAShB,EAAOH,MACf,CAACA,EAASmB,IAMb,OACE,yBAAKM,UAAU,eACb,2BAAOC,GAAG,SAASC,KAAK,SAASC,YAAY,YAAYC,MAAO7B,EAAS8B,SAN5D,SAACC,GAChBR,EAAWQ,EAAEC,cAAcH,QAMvBJ,UAAU,kLCXH,WAACQ,GACd,IAAMjB,EAAWiB,EAAMrB,KAAKI,SACzBL,KAAI,SAACC,EAAMsB,GAAP,OAAkB,yBAAKC,IAAKD,GAAQtB,MAC3C,OACE,yBAAKa,UAAU,aACb,yBAAKA,UAAU,QAAQQ,EAAMrB,KAAKG,OAClC,yBAAKU,UAAU,oCACb,6BACE,8BACGT,OCVE,aAAO,IAKdoB,EAJcC,aAClB,SAACjC,GAAD,OAAsBA,EAAMkC,gBADtBrC,QAKLU,KAAI,SAACC,EAAMsB,GAAP,OAAiB,kBAACK,EAAD,CAAgBJ,IAAKD,EAAOtB,KAAMA,OAC1D,OAAQ,6BAAMwB,ICCDI,MATf,WACE,OACE,yBAAKf,UAAU,iBACb,kBAACgB,EAAD,MACA,kBAAC,EAAD,Q,OCDSC,EALKC,YAAgB,CAClCL,aAAcM,ICIDC,EALDC,YAAe,CAC3BC,QAASL,ICIXM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SR6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.616850a4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport json from 'data/index.json';\r\n\r\nexport type Recipe = {\r\n  title: string\r\n  commands: string[]\r\n}\r\n\r\ntype RecipeState = {\r\n  keyword: string\r\n  recipes: Recipe[]\r\n}\r\n\r\nconst initialState: RecipeState = {\r\n  keyword: '',\r\n  recipes: []\r\n}\r\n\r\nconst recipesSlice = createSlice({\r\n  name: 'recipes',\r\n  initialState,\r\n  reducers: {\r\n    search(state, action: PayloadAction<string>) {\r\n      state.keyword = action.payload;\r\n      const recipeFilter = recipeFilterFactory(state.keyword);\r\n      const recipes: Recipe[] = json.recipes\r\n        .filter(recipeFilter)\r\n        .map(item => item as Recipe);\r\n      state.recipes = recipes;\r\n    }\r\n  }\r\n})\r\n\r\nexport const {\r\n  search\r\n} = recipesSlice.actions\r\n\r\nexport default recipesSlice.reducer;\r\n\r\nconst recipeFilterFactory = (keyword: string) => (recipe: Recipe) => {\r\n  const list = [recipe.title, ...recipe.commands];\r\n  return list.some(item => item.includes(keyword));\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { search } from 'features/RecipeSearch/recipeSearchSlice';\r\n\r\nexport default () => {\r\n  const dispatch = useDispatch();\r\n  const [keyword, setKeyword] = React.useState('');\r\n  React.useEffect(() => {\r\n    dispatch(search(keyword));\r\n  }, [keyword, dispatch])\r\n\r\n  const onChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setKeyword(e.currentTarget.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full px-3\">\r\n      <input id=\"search\" type=\"search\" placeholder=\"search...\" value={keyword} onChange={onChange}\r\n        className=\"appearance-none block w-full bg-gray-light text-gray-dark border border-gray-light rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray\" />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Recipe } from 'features/RecipeSearch/recipeSearchSlice';\r\n\r\ntype Props = {\r\n  item: Recipe\r\n}\r\n\r\nexport default (props: Props) => {\r\n  const commands = props.item.commands\r\n    .map((item, index) => (<div key={index}>{item}</div>));\r\n  return (\r\n    <div className=\"py-4 px-2\">\r\n      <div className=\"py-2\">{props.item.title}</div>\r\n      <div className=\"bg-black text-offwhite py-4 px-8\">\r\n        <pre>\r\n          <code>\r\n            {commands}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'app/rootReducer';\r\n\r\nimport RecipeListitem from 'features/RecipeSearch/RecipeListitem';\r\n\r\nexport default () => {\r\n  const { recipes } = useSelector(\r\n    (state: RootState) => state.recipeSearch\r\n  )\r\n\r\n  const items = recipes\r\n    .map((item, index) => <RecipeListitem key={index} item={item}></RecipeListitem>);\r\n  return (<div>{items}</div>);\r\n};","import React from 'react';\r\nimport \"app/App.css\";\r\nimport SearchBox from 'features/RecipeSearch/SearchBox';\r\nimport Recipes from 'features/RecipeSearch/RecipeList';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app-container\">\r\n      <SearchBox />\r\n      <Recipes />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport recipeSearchSlice from 'features/RecipeSearch/recipeSearchSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  recipeSearch: recipeSearchSlice\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './rootReducer';\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from 'app/App';\r\nimport store from 'app/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}